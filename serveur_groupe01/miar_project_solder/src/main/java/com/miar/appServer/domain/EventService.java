package com.miar.appServer.domain;

import java.util.*;
import java.util.stream.Collectors;

import com.miar.appServer.entities.Spent;
import com.miar.appServer.infra.collections.SpentCollection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.miar.appServer.entities.Event;
import com.miar.appServer.entities.User;
import com.miar.appServer.infra.collections.EventCollection;
import com.miar.appServer.infra.collections.UserCollection;

@Service
public class EventService
{
	@Autowired
	EventCollection	eventCollection;
	@Autowired
	UserCollection	userCollection;
	@Autowired
	SpentCollection spentCollection;
	@Autowired
	SpentService spentService;
	public List< Event > getAll()
	{
		return eventCollection.findAll();
	}

	public ResponseEntity<?> createEvent(Event event )
	{
		//check if user which create event exists in db:
		User creator = userCollection.findByPseudo( event.creatorPseudo );
		if (creator == null) {
			return ResponseEntity
					.status(HttpStatus.UNPROCESSABLE_ENTITY)
					.body("the creator is not present in the database");
		}
		// check if event object is valid
		if (event.name == null || event.place == null || event.supposedDate == null) {
			return ResponseEntity
					.status(HttpStatus.EXPECTATION_FAILED)                 
					.body(
							(event.name == null 
							? "the name of the event is not present\n"
							: "")
							+
							(event.place == null 
							? "the location of the event is not present\n"
							: "")
							+
							(event.supposedDate == null 
							? "the event's date is not present"
							: "")
							);
		}
		// check that is no spents by default
		if (event.spents.size() != 0) return ResponseEntity
				.status(HttpStatus.CONFLICT)                 
				.body(
						(event.spents.size() != 0
						? "Request refused"
						: ""));

		// check that the supposed date is greater than actual date
		//add date to a new event
		event.creationDate = new Date();
		if (event.creationDate.after(event.supposedDate)) return ResponseEntity
				.status(HttpStatus.CONFLICT)                 
				.body(
						event.creationDate.after(event.supposedDate)
						? "date added before today's date"
						: "");

		// add creator of event in contributors
		event.contributors.add(event.creatorPseudo);
		eventCollection.insert( event );	// save in db

		//extract id of event generated by Mongo
		Event addedEvent = eventCollection.findByCreationDate(event.creationDate);
		// User has list of created events id by default which is null when user is created
		creator.created.add( addedEvent.id );
		userCollection.save( creator );

		return new ResponseEntity<>(HttpStatus.OK);
	}

	public Event getEventByid( String id )
	{
		Optional< Event > event = eventCollection.findById( id );
		if( !event.isPresent() )
		{
			return null;
		}
		return event.get();
	}

	public List< Event > getEvent( String name )
	{
		List< Event > event = eventCollection.findByName( name );
		if( event.isEmpty() )
		{
			return null;
		}
		return event;
	}

	public boolean modifyEvent(Event event) {
		Event modifyEvent = getEventByid(event.id);
		// add verification of event body
		// old date- new date
		if (modifyEvent.creationDate.after(event.supposedDate)) return false;
		modifyEvent.supposedDate = event.supposedDate;
		// old place - new place
		modifyEvent.place = event.place;
		return true;
	}

	public boolean removeEvent( String id )
	{
		Event eventToDelete = getEventByid( id );
		if (eventToDelete == null) {
			return false;
		}
		// remove contributors
		if( eventToDelete.contributors != null )
		{
			// supression de l'eveneement dans la liste des evenements invité
			User currentUser;
			for (String userPseudo: eventToDelete.contributors)
			{
				currentUser = userCollection.findByPseudo(userPseudo);
				if (currentUser.invited != null) {
					for (Iterator<String> it = currentUser.invited.iterator(); it.hasNext(); )
					{
						String invitedEventId = it.next();
						if( invitedEventId.equals( id ) )
						{
							it.remove();
						}
					}
				}
				userCollection.save( currentUser );
			}
		}
		// remove spents
		if (eventToDelete.spents != null) {
			Spent currentSpent;
			for (Iterator<String> it = eventToDelete.spents.iterator(); it.hasNext(); ){
				currentSpent = spentCollection.findBySpentId(it.next());
				spentCollection.delete(currentSpent);
				it.remove();
			}
		}

		// supression de l'eveneement dans la liste des evenement créé par le createur
		User creator = userCollection.findByPseudo( eventToDelete.creatorPseudo );
		for( Iterator<String> it =  creator.created.iterator(); it.hasNext(); )
		{
			String eventId = it.next();
			if( eventId.equals( id ) )
			{
				it.remove();
			}
		}
		userCollection.save( creator );
		// supression de l'évenement
		eventCollection.delete( eventToDelete );
		return true;
	}

	public boolean addContributor( String id, String pseudo )
	{
		Event	event		= getEventByid( id );
		User	contributor	= userCollection.findByPseudo( pseudo );
		if (event == null || contributor == null){
			return false;
		}
		event.contributors.add( pseudo );
		contributor.invited.add( event.id );
		userCollection.save( contributor );
		eventCollection.save( event ); // save changes
		return true;
	}

	public List< User > getContributors( String id )
	{
		Event event = getEventByid( id );
		if (event == null){
			return null;
		}
		List<User> contributors = new ArrayList<>();
		User currentContributor;
		for (String contributorPseudo: event.contributors) {
			currentContributor = userCollection.findByPseudo(contributorPseudo);
			contributors.add(currentContributor);
		}
		return contributors;
	}

	public boolean removeContributor( String id, String pseudo )
	{
		

		User contributor;
			Event	event	= getEventByid( id );
		// check that we not delete creator from contributors
		if (event.creatorPseudo.equals(pseudo)) return false;
		for( Iterator<String> it =  event.contributors.iterator(); it.hasNext();)
		{
			String contributorPseudo = it.next();
			if( contributorPseudo.equals( pseudo ) )
			{
				event.contributors.remove( contributorPseudo );
				// remove event from invited for removed contributor
				contributor = userCollection.findByPseudo(contributorPseudo);
				for( Iterator<String> invited =  contributor.invited.iterator(); invited.hasNext();)
				{
					String invitedID = invited.next();
					if(invitedID.equals(event.id)) {
						invited.remove();
						
					}
				}
				
				contributor.invited.remove(event.id);
				userCollection.save(contributor);
				eventCollection.save(event);	//save changes
				List<Spent> spents = spentCollection.findByCreatorPseudo(pseudo);
				List<String> spentsContributor = new ArrayList<String>();
				for (Spent spent : spents) {
					spentsContributor.add(spent.spentId);
				}
				spentService.removeSpent(id, spentsContributor);
				
				
				return true;
			}
		}
		return false;
	}

	public void clear()
	{
		for( Event e : getAll() )
		{
			removeEvent( e.id );
		}
	}
}
